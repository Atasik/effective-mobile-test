// Code generated by MockGen. DO NOT EDIT.
// Source: profiler.go

// Package mock_profiler is a generated GoMock package.
package mock_profiler

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProfiler is a mock of Profiler interface.
type MockProfiler struct {
	ctrl     *gomock.Controller
	recorder *MockProfilerMockRecorder
}

// MockProfilerMockRecorder is the mock recorder for MockProfiler.
type MockProfilerMockRecorder struct {
	mock *MockProfiler
}

// NewMockProfiler creates a new mock instance.
func NewMockProfiler(ctrl *gomock.Controller) *MockProfiler {
	mock := &MockProfiler{ctrl: ctrl}
	mock.recorder = &MockProfilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfiler) EXPECT() *MockProfilerMockRecorder {
	return m.recorder
}

// AgifyPerson mocks base method.
func (m *MockProfiler) AgifyPerson(name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgifyPerson", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgifyPerson indicates an expected call of AgifyPerson.
func (mr *MockProfilerMockRecorder) AgifyPerson(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgifyPerson", reflect.TypeOf((*MockProfiler)(nil).AgifyPerson), name)
}

// GenderizePerson mocks base method.
func (m *MockProfiler) GenderizePerson(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenderizePerson", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenderizePerson indicates an expected call of GenderizePerson.
func (mr *MockProfilerMockRecorder) GenderizePerson(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenderizePerson", reflect.TypeOf((*MockProfiler)(nil).GenderizePerson), name)
}

// NationalizePerson mocks base method.
func (m *MockProfiler) NationalizePerson(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NationalizePerson", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NationalizePerson indicates an expected call of NationalizePerson.
func (mr *MockProfilerMockRecorder) NationalizePerson(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NationalizePerson", reflect.TypeOf((*MockProfiler)(nil).NationalizePerson), name)
}
