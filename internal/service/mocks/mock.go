// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	domain "fio/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPerson is a mock of Person interface.
type MockPerson struct {
	ctrl     *gomock.Controller
	recorder *MockPersonMockRecorder
}

// MockPersonMockRecorder is the mock recorder for MockPerson.
type MockPersonMockRecorder struct {
	mock *MockPerson
}

// NewMockPerson creates a new mock instance.
func NewMockPerson(ctrl *gomock.Controller) *MockPerson {
	mock := &MockPerson{ctrl: ctrl}
	mock.recorder = &MockPersonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPerson) EXPECT() *MockPersonMockRecorder {
	return m.recorder
}

// AddPerson mocks base method.
func (m *MockPerson) AddPerson(person domain.Person) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPerson", person)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPerson indicates an expected call of AddPerson.
func (mr *MockPersonMockRecorder) AddPerson(person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPerson", reflect.TypeOf((*MockPerson)(nil).AddPerson), person)
}

// DeletePerson mocks base method.
func (m *MockPerson) DeletePerson(personID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePerson", personID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePerson indicates an expected call of DeletePerson.
func (mr *MockPersonMockRecorder) DeletePerson(personID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerson", reflect.TypeOf((*MockPerson)(nil).DeletePerson), personID)
}

// GetPersons mocks base method.
func (m *MockPerson) GetPersons(opts domain.PersonsQuery) ([]domain.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersons", opts)
	ret0, _ := ret[0].([]domain.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersons indicates an expected call of GetPersons.
func (mr *MockPersonMockRecorder) GetPersons(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersons", reflect.TypeOf((*MockPerson)(nil).GetPersons), opts)
}

// UpdatePerson mocks base method.
func (m *MockPerson) UpdatePerson(personID int, UpdateInput domain.UpdatePersonInput) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePerson", personID, UpdateInput)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePerson indicates an expected call of UpdatePerson.
func (mr *MockPersonMockRecorder) UpdatePerson(personID, UpdateInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerson", reflect.TypeOf((*MockPerson)(nil).UpdatePerson), personID, UpdateInput)
}
