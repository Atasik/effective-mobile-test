{
    "swagger": "2.0",
    "info": {
        "description": "тех. задание с отбора на стажировку Effective-Mobile",
        "title": "Effective-Mobile Trainee Assignment",
        "contact": {},
        "version": "2.0"
    },
    "host": "localhost:8079",
    "basePath": "/",
    "paths": {
        "/api/person": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "person"
                ],
                "summary": "Add Person",
                "operationId": "add-person",
                "parameters": [
                    {
                        "description": "Person content",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Person"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "id",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    }
                }
            }
        },
        "/api/person/{personID}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "person"
                ],
                "summary": "Update Person",
                "operationId": "update-person",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of person to update",
                        "name": "personID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Person content",
                        "name": "input",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/domain.UpdatePersonInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "person"
                ],
                "summary": "Delete Person",
                "operationId": "delete-person",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of person to delete",
                        "name": "personID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    }
                }
            }
        },
        "/api/persons": {
            "get": {
                "tags": [
                    "person"
                ],
                "summary": "Get Persons",
                "operationId": "get-persons",
                "parameters": [
                    {
                        "type": "integer",
                        "example": 35,
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "male",
                        "name": "gender",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "Vladimir",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "RU",
                        "name": "nationality",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "Viktorovych",
                        "name": "patronymic",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "Davydov",
                        "name": "surname",
                        "in": "query"
                    },
                    {
                        "enum": [
                            10,
                            25,
                            50
                        ],
                        "type": "integer",
                        "description": "limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "page",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.getPersonsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/v1.errorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Person": {
            "type": "object",
            "required": [
                "name",
                "surname"
            ],
            "properties": {
                "age": {
                    "type": "integer",
                    "example": 22
                },
                "gender": {
                    "type": "string",
                    "example": "male"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Dmitriy"
                },
                "nationality": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string",
                    "example": "Vasilevich"
                },
                "surname": {
                    "type": "string",
                    "example": "Ushakov"
                }
            }
        },
        "domain.UpdatePersonInput": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer",
                    "example": 22
                },
                "gender": {
                    "type": "string",
                    "example": "male"
                },
                "name": {
                    "type": "string",
                    "example": "Alexey"
                },
                "nationality": {
                    "type": "string",
                    "example": "RU"
                },
                "patronymic": {
                    "type": "string",
                    "example": "Vladimirovich"
                },
                "surname": {
                    "type": "string",
                    "example": "Yakovlev"
                }
            }
        },
        "v1.errorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "v1.getPersonsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Person"
                    }
                }
            }
        },
        "v1.statusResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        }
    }
}